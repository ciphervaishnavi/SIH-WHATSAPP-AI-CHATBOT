// Netlify Function for WhatsApp Webhook
const FacebookWhatsAppService = require('../../facebookService');
const SimpleHealthLLM = require('../../llmService');
const googleLLMService = require('../../googleLLMService');
const fs = require('fs');
const path = require('path');

// Initialize services
let facebookService;
try {
    facebookService = new FacebookWhatsAppService();
} catch (error) {
    console.error('‚ùå Error initializing Facebook service:', error.message);
}

// Load health data
const healthDataPath = path.join(__dirname, '../../healthData.json');
let healthData = {};
try {
    const data = fs.readFileSync(healthDataPath, 'utf8');
    healthData = JSON.parse(data);
} catch (error) {
    console.error('‚ùå Error loading health data:', error.message);
}

// Utility functions
function detectLanguage(message) {
    const hindiWords = ['‡§π‡•à‡§≤‡•ã', '‡§®‡§Æ‡§∏‡•ç‡§§‡•á', '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø', '‡§¨‡•Å‡§ñ‡§æ‡§∞', '‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶', '‡§¶‡§µ‡§æ', '‡§°‡•â‡§ï‡•ç‡§ü‡§∞', '‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤', '‡§á‡§≤‡§æ‡§ú', '‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä'];
    const oriyaWords = ['‡¨®‡¨Æ‡¨∏‡≠ç‡¨ï‡¨æ‡¨∞', '‡¨π‡≠á‡¨≤‡≠ã', '‡¨∏‡≠ç‡≠±‡¨æ‡¨∏‡≠ç‡¨•‡≠ç‡≠ü', '‡¨ú‡≠ç‡≠±‡¨∞', '‡¨Æ‡≠Å‡¨£‡≠ç‡¨°‡¨¨‡¨ø‡¨®‡≠ç‡¨ß‡¨æ', '‡¨î‡¨∑‡¨ß', '‡¨°‡¨æ‡¨ï‡≠ç‡¨§‡¨∞', '‡¨ö‡¨ø‡¨ï‡¨ø‡¨§‡≠ç‡¨∏‡¨æ‡¨≥‡≠ü', '‡¨ö‡¨ø‡¨ï‡¨ø‡¨§‡≠ç‡¨∏‡¨æ', '‡¨∞‡≠ã‡¨ó'];
    
    const lowerMessage = message.toLowerCase();
    
    if (hindiWords.some(word => lowerMessage.includes(word))) {
        return 'hi';
    }
    if (oriyaWords.some(word => lowerMessage.includes(word))) {
        return 'or';
    }
    return 'en';
}

function findHealthResponse(userMessage, language) {
    const normalizedMessage = userMessage.toLowerCase().trim();
    
    // Check Q&A section
    if (healthData.qa && Array.isArray(healthData.qa)) {
        for (const item of healthData.qa) {
            const keywords = item.keywords || [];
            const hasMatch = keywords.some(keyword => 
                normalizedMessage.includes(keyword.toLowerCase())
            );
            
            if (hasMatch && item.answer && item.answer[language]) {
                return item.answer[language];
            }
        }
    }
    
    return null;
}

exports.handler = async (event, context) => {
    const { httpMethod, queryStringParameters, body } = event;
    
    // Handle GET request for webhook verification
    if (httpMethod === 'GET') {
        const mode = queryStringParameters['hub.mode'];
        const token = queryStringParameters['hub.verify_token'];
        const challenge = queryStringParameters['hub.challenge'];
        
        if (mode && token) {
            if (mode === 'subscribe' && token === process.env.FACEBOOK_VERIFY_TOKEN) {
                console.log('‚úÖ Webhook verified successfully');
                return {
                    statusCode: 200,
                    body: challenge
                };
            } else {
                console.log('‚ùå Webhook verification failed');
                return {
                    statusCode: 403,
                    body: 'Forbidden'
                };
            }
        }
        
        return {
            statusCode: 400,
            body: 'Bad Request'
        };
    }
    
    // Handle POST request for incoming messages
    if (httpMethod === 'POST') {
        try {
            const data = JSON.parse(body);
            
            if (data.object === 'whatsapp_business_account') {
                const entry = data.entry?.[0];
                const changes = entry?.changes?.[0];
                const value = changes?.value;
                
                if (value?.messages) {
                    for (const message of value.messages) {
                        const from = message.from;
                        const messageType = message.type;
                        
                        if (messageType === 'text') {
                            const userMessage = message.text.body;
                            const language = detectLanguage(userMessage);
                            
                            console.log(`üì± Received message from ${from}: ${userMessage} (Language: ${language})`);
                            
                            // Mark message as read
                            if (facebookService && facebookService.isConfigured()) {
                                try {
                                    await facebookService.markAsRead(message.id);
                                } catch (error) {
                                    console.error('‚ùå Error marking message as read:', error.message);
                                }
                            }
                            
                            let response = null;
                            
                            // Try health data first
                            response = findHealthResponse(userMessage, language);
                            
                            // If no health response found, try LLM services
                            if (!response) {
                                try {
                                    // Try Google LLM first
                                    if (googleLLMService.isConfigured()) {
                                        response = await googleLLMService.getHealthResponse(userMessage, language);
                                        console.log('ü§ñ Google LLM Response:', response);
                                    }
                                    
                                    // If Google LLM fails, try Hugging Face
                                    if (!response && SimpleHealthLLM.isConfigured()) {
                                        response = await SimpleHealthLLM.getHealthResponse(userMessage, language);
                                        console.log('ü§ñ Hugging Face LLM Response:', response);
                                    }
                                } catch (error) {
                                    console.error('‚ùå LLM Error:', error.message);
                                }
                            }
                            
                            // Default fallback responses
                            if (!response) {
                                const fallbackResponses = {
                                    en: "I understand you're asking about health. While I can help with general health information, please consult a healthcare professional for specific medical advice.",
                                    hi: "‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§ó‡§Ø‡§æ ‡§π‡•Ç‡§Å ‡§ï‡§ø ‡§Ü‡§™ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§ ‡§π‡§æ‡§≤‡§æ‡§Ç‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§≤‡§æ‡§π ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§∏‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§",
                                    or: "‡¨Æ‡≠Å‡¨Å ‡¨¨‡≠Å‡¨ù‡¨ø‡¨≤‡¨ø ‡¨Ø‡≠á ‡¨Ü‡¨™‡¨£ ‡¨∏‡≠ç‡≠±‡¨æ‡¨∏‡≠ç‡¨•‡≠ç‡≠ü ‡¨¨‡¨ø‡¨∑‡≠ü‡¨∞‡≠á ‡¨™‡¨ö‡¨æ‡¨∞‡≠Å‡¨õ‡¨®‡≠ç‡¨§‡¨ø‡•§ ‡¨Ø‡¨¶‡¨ø‡¨ì ‡¨Æ‡≠Å‡¨Å ‡¨∏‡¨æ‡¨ß‡¨æ‡¨∞‡¨£ ‡¨∏‡≠ç‡≠±‡¨æ‡¨∏‡≠ç‡¨•‡≠ç‡≠ü ‡¨∏‡≠Ç‡¨ö‡¨®‡¨æ‡¨∞‡≠á ‡¨∏‡¨æ‡¨π‡¨æ‡¨Ø‡≠ç‡≠ü ‡¨ï‡¨∞‡¨ø‡¨™‡¨æ‡¨∞‡¨ø‡¨¨‡¨ø, ‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨®‡¨ø‡¨∞‡≠ç‡¨¶‡≠ç‡¨¶‡¨ø‡¨∑‡≠ç‡¨ü ‡¨ö‡¨ø‡¨ï‡¨ø‡¨§‡≠ç‡¨∏‡¨æ ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂ ‡¨™‡¨æ‡¨á‡¨Å ‡¨ú‡¨£‡≠á ‡¨∏‡≠ç‡≠±‡¨æ‡¨∏‡≠ç‡¨•‡≠ç‡≠ü ‡¨¨‡¨ø‡¨∂‡≠á‡¨∑‡¨ú‡≠ç‡¨û‡¨ô‡≠ç‡¨ï ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂ ‡¨®‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å‡•§"
                                };
                                response = fallbackResponses[language] || fallbackResponses.en;
                            }
                            
                            // Send response
                            if (facebookService && facebookService.isConfigured() && response) {
                                try {
                                    await facebookService.sendMessage(from, response);
                                    console.log(`‚úÖ Response sent to ${from}: ${response.substring(0, 50)}...`);
                                } catch (error) {
                                    console.error('‚ùå Error sending message:', error.message);
                                }
                            } else {
                                console.log('üîß Demo mode - would send:', response);
                            }
                        }
                    }
                }
            }
            
            return {
                statusCode: 200,
                body: 'OK'
            };
        } catch (error) {
            console.error('‚ùå Webhook error:', error.message);
            return {
                statusCode: 500,
                body: 'Internal Server Error'
            };
        }
    }
    
    return {
        statusCode: 405,
        body: 'Method Not Allowed'
    };
};