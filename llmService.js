// Simple LLM Service for Health Chatbot
// Uses Hugging Face Inference API for minimal setup

const { HfInference } = require('@huggingface/inference');
const fs = require('fs');
const path = require('path');

class SimpleHealthLLM {
    constructor() {
        // Initialize Hugging Face client (free tier)
        this.hf = new HfInference(process.env.HUGGINGFACE_API_KEY || 'hf_demo');
        
        // Use a model that works with Hugging Face Inference API
        this.modelName = 'microsoft/DialoGPT-medium';
        
        // Load training data
        this.trainingData = this.loadTrainingData();
        
        console.log('ü§ñ Simple Health LLM initialized');
    }

    /**
     * Load training data from file
     */
    loadTrainingData() {
        try {
            const trainingPath = path.join(__dirname, 'trainingData.json');
            if (fs.existsSync(trainingPath)) {
                const rawData = fs.readFileSync(trainingPath);
                return JSON.parse(rawData);
            }
        } catch (error) {
            console.log('‚ö†Ô∏è No training data found, using basic health knowledge');
        }
        
        // Default basic health training data
        return {
            conversations: [
                {
                    input: "what are flu symptoms",
                    output: "Flu symptoms include fever, cough, sore throat, body aches, headache, and fatigue. Visit a doctor if symptoms are severe or last more than a week.",
                    language: "en"
                },
                {
                    input: "‡§´‡•ç‡§≤‡•Ç ‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç",
                    output: "‡§´‡•ç‡§≤‡•Ç ‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§¨‡•Å‡§ñ‡§æ‡§∞, ‡§ñ‡§æ‡§Ç‡§∏‡•Ä, ‡§ó‡§≤‡•á ‡§Æ‡•á‡§Ç ‡§¶‡§∞‡•ç‡§¶, ‡§∂‡§∞‡•Ä‡§∞ ‡§Æ‡•á‡§Ç ‡§¶‡§∞‡•ç‡§¶, ‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶ ‡§î‡§∞ ‡§•‡§ï‡§æ‡§® ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•à‡§Ç‡•§ ‡§Ø‡§¶‡§ø ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§π‡•à‡§Ç ‡§Ø‡§æ ‡§è‡§ï ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§∞‡§π‡§§‡•á ‡§π‡•à‡§Ç ‡§§‡•ã ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç‡•§",
                    language: "hi"
                }
            ],
            lastTrained: new Date().toISOString()
        };
    }

    /**
     * Generate response using LLM with health context
     */
    async generateResponse(userInput, language = 'en') {
        try {
            console.log(`ü§ñ LLM processing: "${userInput}" (${language})`);
            
            // Try conversational API first (better for chat models)
            try {
                const response = await this.hf.conversational({
                    model: this.modelName,
                    inputs: {
                        past_user_inputs: [],
                        generated_responses: [],
                        text: this.createHealthPrompt(userInput, language)
                    },
                    parameters: {
                        max_length: 150,
                        temperature: 0.7
                    }
                });

                let llmResponse = response.generated_text.trim();
                llmResponse = this.cleanResponse(llmResponse);
                
                console.log(`‚úÖ LLM response generated: ${llmResponse.substring(0, 50)}...`);
                return llmResponse;
                
            } catch (convError) {
                console.log('üîÑ Conversational API failed, trying text generation...');
                
                // Fallback to text generation
                const response = await this.hf.textGeneration({
                    model: 'gpt2',
                    inputs: this.createHealthPrompt(userInput, language),
                    parameters: {
                        max_new_tokens: 100,
                        temperature: 0.7,
                        return_full_text: false
                    }
                });

                let llmResponse = response.generated_text.trim();
                llmResponse = this.cleanResponse(llmResponse);
                
                console.log(`‚úÖ LLM fallback response: ${llmResponse.substring(0, 50)}...`);
                return llmResponse;
            }
            
        } catch (error) {
            console.error('‚ùå LLM Error:', error.message);
            
            // Try smart health knowledge fallback
            console.log('üß† Trying smart health fallback...');
            const smartResponse = this.getSmartHealthResponse(userInput, language);
            if (smartResponse) {
                console.log('‚úÖ Smart health response generated');
                return smartResponse;
            }
            
            return null; // Will fallback to JSON matching
        }
    }

    /**
     * Smart health knowledge fallback when LLM fails
     */
    getSmartHealthResponse(userInput, language) {
        const input = userInput.toLowerCase();
        
        // Common health patterns and responses
        const healthPatterns = {
            'pain': {
                en: "Pain can have many causes. For persistent pain, rest, apply ice/heat as appropriate, and consult a healthcare provider if it lasts more than a few days or is severe.",
                hi: "‡§¶‡§∞‡•ç‡§¶ ‡§ï‡•á ‡§ï‡§à ‡§ï‡§æ‡§∞‡§£ ‡§π‡•ã ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§¶‡§∞‡•ç‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç, ‡§â‡§ö‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¨‡§∞‡•ç‡§´/‡§ó‡§∞‡•ç‡§Æ‡•Ä ‡§≤‡§ó‡§æ‡§è‡§Ç, ‡§î‡§∞ ‡§Ø‡§¶‡§ø ‡§Ø‡§π ‡§ï‡•Å‡§õ ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§∞‡§π‡§§‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§π‡•à ‡§§‡•ã ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§§‡§æ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§",
                or: "‡¨Ø‡¨®‡≠ç‡¨§‡≠ç‡¨∞‡¨£‡¨æ‡¨∞ ‡¨Ö‡¨®‡≠á‡¨ï ‡¨ï‡¨æ‡¨∞‡¨£ ‡¨π‡≠ã‡¨á‡¨™‡¨æ‡¨∞‡≠á‡•§ ‡¨®‡¨ø‡¨∞‡¨®‡≠ç‡¨§‡¨∞ ‡¨Ø‡¨®‡≠ç‡¨§‡≠ç‡¨∞‡¨£‡¨æ ‡¨™‡¨æ‡¨á‡¨Å ‡¨¨‡¨ø‡¨∂‡≠ç‡¨∞‡¨æ‡¨Æ ‡¨®‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å, ‡¨â‡¨™‡¨Ø‡≠Å‡¨ï‡≠ç‡¨§ ‡¨∞‡≠Ç‡¨™‡¨∞‡≠á ‡¨¨‡¨∞‡¨´/‡¨ó‡¨∞‡¨Æ ‡¨≤‡¨ó‡¨æ‡¨®‡≠ç‡¨§‡≠Å, ‡¨è‡¨¨‡¨Ç ‡¨Ø‡¨¶‡¨ø ‡¨è‡¨π‡¨æ ‡¨ï‡¨ø‡¨õ‡¨ø ‡¨¶‡¨ø‡¨®‡¨∞‡≠Å ‡¨Ö‡¨ß‡¨ø‡¨ï ‡¨∞‡¨π‡≠á ‡¨ï‡¨ø‡¨Æ‡≠ç‡¨¨‡¨æ ‡¨ó‡¨Æ‡≠ç‡¨≠‡≠Ä‡¨∞ ‡¨π‡≠Å‡¨è ‡¨§‡≠á‡¨¨‡≠á ‡¨∏‡≠ç‡≠±‡¨æ‡¨∏‡≠ç‡¨•‡≠ç‡≠ü ‡¨∏‡≠á‡¨¨‡¨æ ‡¨™‡≠ç‡¨∞‡¨¶‡¨æ‡¨®‡¨ï‡¨æ‡¨∞‡≠Ä‡¨ô‡≠ç‡¨ï ‡¨∏‡¨π‡¨ø‡¨§ ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å‡•§"
            },
            'cough': {
                en: "Coughs can be due to viral infections, allergies, or irritants. Stay hydrated, use honey for soothing, and see a doctor if cough persists for more than 2 weeks or has blood.",
                hi: "‡§ñ‡§æ‡§Ç‡§∏‡•Ä ‡§µ‡§æ‡§Ø‡§∞‡§≤ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£, ‡§è‡§≤‡§∞‡•ç‡§ú‡•Ä ‡§Ø‡§æ ‡§™‡§∞‡•á‡§∂‡§æ‡§® ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§™‡§¶‡§æ‡§∞‡•ç‡§•‡•ã‡§Ç ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§ ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç, ‡§∂‡§π‡§¶ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç, ‡§î‡§∞ ‡§Ø‡§¶‡§ø ‡§ñ‡§æ‡§Ç‡§∏‡•Ä 2 ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§∞‡§π‡§§‡•Ä ‡§π‡•à ‡§Ø‡§æ ‡§ñ‡•Ç‡§® ‡§π‡•à ‡§§‡•ã ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç‡•§",
                or: "‡¨ï‡¨æ‡¨∂ ‡¨≠‡¨æ‡¨á‡¨∞‡¨æ‡¨≤ ‡¨∏‡¨Ç‡¨ï‡≠ç‡¨∞‡¨Æ‡¨£, ‡¨Ü‡¨≤‡¨∞‡≠ç‡¨ú‡¨ø ‡¨ï‡¨ø‡¨Æ‡≠ç‡¨¨‡¨æ ‡¨â‡¨§‡≠ç‡¨§‡≠á‡¨ú‡¨ï ‡¨ï‡¨æ‡¨∞‡¨£‡¨∞‡≠Å ‡¨π‡≠ã‡¨á‡¨™‡¨æ‡¨∞‡≠á‡•§ ‡¨π‡¨æ‡¨á‡¨°‡≠ç‡¨∞‡≠á‡¨ü‡≠á‡¨° ‡¨∞‡≠Å‡¨π‡¨®‡≠ç‡¨§‡≠Å, ‡¨Æ‡¨π‡≠Å ‡¨¨‡≠ç‡≠ü‡¨¨‡¨π‡¨æ‡¨∞ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å, ‡¨è‡¨¨‡¨Ç ‡¨Ø‡¨¶‡¨ø ‡¨ï‡¨æ‡¨∂ 2 ‡¨∏‡¨™‡≠ç‡¨§‡¨æ‡¨π‡¨∞‡≠Å ‡¨Ö‡¨ß‡¨ø‡¨ï ‡¨∞‡¨π‡≠á ‡¨ï‡¨ø‡¨Æ‡≠ç‡¨¨‡¨æ ‡¨∞‡¨ï‡≠ç‡¨§ ‡¨•‡¨æ‡¨è ‡¨§‡≠á‡¨¨‡≠á ‡¨°‡¨æ‡¨ï‡≠ç‡¨§‡¨∞‡¨ô‡≠ç‡¨ï‡≠Å ‡¨¶‡≠á‡¨ñ‡¨æ‡¨®‡≠ç‡¨§‡≠Å‡•§"
            },
            'headache': {
                en: "Headaches can be caused by stress, dehydration, lack of sleep, or eyestrain. Rest in a dark room, stay hydrated, and consider over-the-counter pain relief if needed.",
                hi: "‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶ ‡§§‡§®‡§æ‡§µ, ‡§®‡§ø‡§∞‡•ç‡§ú‡§≤‡•Ä‡§ï‡§∞‡§£, ‡§®‡•Ä‡§Ç‡§¶ ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä ‡§Ø‡§æ ‡§Ü‡§Ç‡§ñ‡•ã‡§Ç ‡§™‡§∞ ‡§ú‡•ã‡§∞ ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§ ‡§Ö‡§Ç‡§ß‡•á‡§∞‡•á ‡§ï‡§Æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç, ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç, ‡§î‡§∞ ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§™‡§°‡§º‡§®‡•á ‡§™‡§∞ ‡§¶‡§∞‡•ç‡§¶ ‡§®‡§ø‡§µ‡§æ‡§∞‡§ï ‡§¶‡§µ‡§æ ‡§≤‡•á‡§®‡•á ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§",
                or: "‡¨Æ‡≠Å‡¨£‡≠ç‡¨°‡¨¨‡¨ø‡¨®‡≠ç‡¨ß‡¨æ ‡¨ö‡¨æ‡¨™, ‡¨®‡¨ø‡¨∞‡≠ç‡¨ú‡¨≥‡≠Ä‡¨ï‡¨∞‡¨£, ‡¨®‡¨ø‡¨¶‡≠ç‡¨∞‡¨æ ‡¨Ö‡¨≠‡¨æ‡¨¨ ‡¨ï‡¨ø‡¨Æ‡≠ç‡¨¨‡¨æ ‡¨Ü‡¨ñ‡¨ø ‡¨â‡¨™‡¨∞‡≠á ‡¨ö‡¨æ‡¨™ ‡¨ï‡¨æ‡¨∞‡¨£‡¨∞‡≠Å ‡¨π‡≠ã‡¨á‡¨™‡¨æ‡¨∞‡≠á‡•§ ‡¨Ö‡¨®‡≠ç‡¨ß‡¨æ‡¨∞ ‡¨ï‡≠ã‡¨†‡¨∞‡≠Ä‡¨∞‡≠á ‡¨¨‡¨ø‡¨∂‡≠ç‡¨∞‡¨æ‡¨Æ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å, ‡¨π‡¨æ‡¨á‡¨°‡≠ç‡¨∞‡≠á‡¨ü‡≠á‡¨° ‡¨∞‡≠Å‡¨π‡¨®‡≠ç‡¨§‡≠Å, ‡¨è‡¨¨‡¨Ç ‡¨Ü‡¨¨‡¨∂‡≠ç‡≠ü‡¨ï ‡¨π‡≠á‡¨≤‡≠á ‡¨Ø‡¨®‡≠ç‡¨§‡≠ç‡¨∞‡¨£‡¨æ ‡¨®‡¨ø‡¨¨‡¨æ‡¨∞‡¨ï ‡¨î‡¨∑‡¨ß ‡¨®‡≠á‡¨¨‡¨æ‡¨ï‡≠Å ‡¨¨‡¨ø‡¨ö‡¨æ‡¨∞ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å‡•§"
            }
        };
        
        // Check for pattern matches
        for (const [pattern, responses] of Object.entries(healthPatterns)) {
            if (input.includes(pattern)) {
                return responses[language] || responses.en;
            }
        }
        
        return null;
    }

    /**
     * Create health-focused prompt for LLM
     */
    createHealthPrompt(userInput, language) {
        const languageInstructions = {
            'en': 'Respond in English',
            'hi': 'Respond in Hindi',
            'or': 'Respond in Oriya'
        };

        return `You are a helpful health assistant. Provide accurate, concise health information.

User Question: ${userInput}

Instructions:
- ${languageInstructions[language] || 'Respond in English'}
- Focus on health topics only
- Include when to see a doctor
- Keep response under 100 words
- Be empathetic and helpful

Response:`;
    }

    /**
     * Clean and validate LLM response
     */
    cleanResponse(response) {
        // Remove any unwanted text, ensure it's health-focused
        response = response.replace(/^\s*Response:\s*/i, '');
        response = response.replace(/\n+/g, ' ');
        response = response.trim();
        
        // Ensure it ends properly
        if (!response.match(/[.!?]$/)) {
            response += '.';
        }
        
        return response;
    }

    /**
     * Add new training example
     */
    addTrainingExample(input, output, language) {
        const newExample = {
            input: input.toLowerCase(),
            output,
            language,
            timestamp: new Date().toISOString()
        };
        
        this.trainingData.conversations.push(newExample);
        
        // Save to file
        this.saveTrainingData();
        
        console.log(`üìö Added training example: "${input}" -> "${output.substring(0, 30)}..."`);
    }

    /**
     * Save training data to file
     */
    saveTrainingData() {
        try {
            const trainingPath = path.join(__dirname, 'trainingData.json');
            fs.writeFileSync(trainingPath, JSON.stringify(this.trainingData, null, 2));
            console.log('üíæ Training data saved');
        } catch (error) {
            console.error('‚ùå Error saving training data:', error.message);
        }
    }

    /**
     * Simple training function - learns from interactions
     */
    async trainFromInteraction(userInput, botResponse, isCorrect, language) {
        if (isCorrect) {
            // Add successful interaction to training data
            this.addTrainingExample(userInput, botResponse, language);
        } else {
            // Log unsuccessful interaction for review
            console.log(`‚ùå Incorrect response logged: "${userInput}" -> "${botResponse}"`);
        }
    }

    /**
     * Get training statistics
     */
    getTrainingStats() {
        return {
            totalExamples: this.trainingData.conversations.length,
            languages: [...new Set(this.trainingData.conversations.map(c => c.language))],
            lastTrained: this.trainingData.lastTrained,
            lastExample: this.trainingData.conversations[this.trainingData.conversations.length - 1]
        };
    }
}

module.exports = SimpleHealthLLM;